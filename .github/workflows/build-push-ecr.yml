name: Build and Push to ECR
on:
  push:
    branches: [ main ]
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Build with Maven
      # env:
        # SPRING_PROFILES_ACTIVE: dev
      run: mvn -B package --file pom.xml -DskipTests
        
    - name: Login to Amazon ECR Public
      run: |
        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: public.ecr.aws/r1b3l1w9
        ECR_REPOSITORY: notable
        IMAGE_TAG: notable_image
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        
  deploy:
    name: Deploy to ECS
    needs: build-and-push  # Assumes your build job is named this
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Register new ECS task definition
        id: task-def
        run: |
          # Get current task definition
          aws ecs describe-task-definition --task-definition notable-task --query taskDefinition > task-definition.json
          
          # Update container image in task definition
          jq '.containerDefinitions[0].image = "public.ecr.aws/r1b3l1w9/notable:latest"' task-definition.json > new-task-definition.json
          
          # Register new task definition version
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --family notable-task \
            --requires-compatibilities FARGATE \
            --network-mode awsvpc \
            --cpu "2048" \
            --memory "4096" \
            --execution-role-arn $(jq -r '.executionRoleArn' task-definition.json) \
            --task-role-arn $(jq -r '.taskRoleArn' task-definition.json) \
            --container-definitions "$(jq '.containerDefinitions' new-task-definition.json)" \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "task_definition_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Create AppSpec file
        run: |
          cat > appspec.yaml << 'EOF'
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: "${TASK_DEF_ARN}"
                  LoadBalancerInfo:
                    ContainerName: "notable-container"
                    ContainerPort: 5000
                  PlatformVersion: "LATEST"
          EOF
          
          # Replace placeholder with actual task definition ARN
          sed -i "s|\${TASK_DEF_ARN}|${{ env.task_definition_arn }}|g" appspec.yaml
          
          # Print AppSpec for debugging
          cat appspec.yaml

      - name: Deploy to AWS CodeDeploy
        run: |
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name notable-application \
            --deployment-group-name notable-deployment-group \
            --revision revisionType=AppSpecContent,appSpecContent="{content='$(cat appspec.yaml)'}" \
            --description "Automated deployment via GitHub Actions" \
            --query 'deploymentId' \
            --output text)
          
          echo "Started deployment: $DEPLOYMENT_ID"        